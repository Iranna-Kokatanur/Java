1.Start thread by extending thread and override the run method
2.Start thread by implementing runnable interface and override the run method.

Thread Life Cycle:

1. New - A thread is in this state when it is created but not yet started.
2. Runnable - After the start method is called, the thread becomes runnable.
   It's ready to run and is waiting for CPU time.
3. Running - The thread is in this state when it is executing.
4. Blocked/Waiting - A thread is in this state when it is waiting for a
   resource or for another thread to perform an action.
5. Terminated - A thread is in state when it has finished executing.

Thread methods:

start run sleep join setPriority interrupt yield setDaemon

//JVM will not wait for daemon (background threads) 

// means if other threads is completed then i will not wait

Synchronization:

When multiple threading using the same resources, result will be wrong. Then look for the method where the object or resource
is getting modified or accessed make that method or block of code as synchronized so that one thread can use at that time. The part of the program that you are making synchronized is critical section .

The condition which is making the soln/ans different is raised condition (solved by synchronized). 

Mutual Exclusion

Locks:

Locking is the method to lock the thread when the multiple threads are using the same resources so that one thread can access the resources later other will.

Intransic: These are inbuilt on java objects. used by adding synchronized key word. Here we dont have control on lock.
Here thread will wait for one to finish and executed later.

Explicit:  It is exlplicit by java.util.concurrent.lock. Where you can lock the specified thread you want. Here if the lock is not
available thread2 or other threads cant access the resources. Main thread will be completed without other threads.

E.g : Lock will ask wait for 1000 ms, but transaction is taking more than this, then thread2 will not wait for that, without thread2
the Main thread will get finished.

1. lock.lock() -> thread will wait until its get lock
2. lock.tryLock() -> try once and go
3. lock.unlock() -> unlock the lock

Reentrant lock -> Current thread can lock itself again more than once (Deadlock occurs - Means the current threads depends on something
to get unlock but the dependent depend on the the one which is waiting for it)
