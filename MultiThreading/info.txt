
CPU:

It is the brain of the computer and responsible for executing the instructions
from programs. It performs arithmetic, logical, control and i/o operations.

CORE:

It is an individual processing unit in a cpu.

The number of cores that many works be done parallely.

PROGRAM:

Set of instructions written in programming language to perform the task from computer.

PROCESS:

It is the instance of the program that is being executed. When program runs, the 
os creates a process to manage its execution.

E.g : when we open the microsoft word, it becomes a process in the os.

THREAD:

Thread is the smallest unit of execution within a process. A process can have multiple threads, which share the same resources but can run independently.

E.g : google chrome might use multiple threads for different tabs, with each tab 
running as a separate thread.

Multitasking:

Multitasking allows an os to run multiple processes simultaneously.

One single core, this is done through time-sharing, rapidly switching between taks.

On Multiple core cpus, true parallel execution occurs, with tasks distributed accross cores. The OS schedular balances the load, ensuring the efficient and 
responsive system performance.

E.g : Listening music while downloading the files.

Multitasking utilizes the capabiilities of a cpu and its cores. When an os performs multitasking, it can assign different tasks to different cores. this is more effiecient that assigning all tasks to single core.

Multithreading:

It referes to the ability to execute multiple threads within a single process
concurrently.

E.g: A web browser can use multithreading by having separate threads for rendering the page, runnning javascript, and managing user inputs. This makes the browser more responsive and efficient.

Multithreading enhances the efficieny of multitasking by breaking down individual tasks into smaller sub-tasks or threads. These threads can be processed simulteneously, making better use of the cpu's capabilities.

In single core system, both the threads and processe are managed by the os schedular through time slicing and context switching to create the illusion of 
simultaneous execution.

In multicore system, both the threads and processes can run in true parallel on different cores, with the os schedular distributing tasks across the cores to optimize performance.

Time Slicing:

Definition: Time slicing divides cpu time into small intervals called time slices or quanta.

Function: The OS schedualr allocates these time slices to different processes and threads, ensuring each gets a fair share of cpu time.

Purpose: This prevents any single process or thread form monopolizing the cpu, improving responsiveness and enabling concurrent execution.

Context switching:

It is the process of saving the state of a currently runnning process or thread and loading the state of the next one to be executed.

Function: When a process or threads time slice expires, the os schedular performs 
a contect switch to move the cpus focus to another process or thread.

Purpose:

This allows multiple processes and threads to share the cpu, giving the appearance of simultaneous execution of single core cpu or improving parallelism
on multi core cpus.



Multitasking can be achieved through multithreading where each task is divided into threads that are managed concurrently.

While multitasking typically refers to the running of multiple applications,
multithreading is more granular, dealing with multiple threads within the same application or process.

Multitasking operates at the level of processes, which are the operating system's
primary units of execution.

Multithreading operates at the level of threads, which are smaller units within a process.

Multitasking involves managing resources between completely separate programs, which may have independent memory spaces and system resources.

Multithreading involves managing resources within a single program, where threads share the same memory and resources.

Multitasking aloows us to run mutliple applications simultaneously, improving productivity and system utilization.

Multithreading allows a single application to perform multiple tasks at the same time, improving application performance and responsiveness.

E.g: The office manager(OS) assigns different employees (processes) to work on different projects(applications) simulaneously. Each employee works on a different project independently.

Within a single project(application), a team (process) of employees (threads)
works on different parts of the project at the same time, collaborating and sharing the resources.



