NOTES:

https://engineeringdigest.medium.com/multithreading-in-java-39f34724bbf6

1.Start thread by extending thread and override the run method
2.Start thread by implementing runnable interface and override the run method.

Thread Life Cycle:

1. New - A thread is in this state when it is created but not yet started.
2. Runnable - After the start method is called, the thread becomes runnable.
   It's ready to run and is waiting for CPU time.
3. Running - The thread is in this state when it is executing.
4. Blocked/Waiting - A thread is in this state when it is waiting for a
   resource or for another thread to perform an action.
5. Terminated - A thread is in state when it has finished executing.

Thread methods:

start run sleep join setPriority interrupt yield setDaemon

//JVM will not wait for daemon (background threads) 

// means if other threads is completed then i will not wait

Synchronization:

When multiple threading using the same resources, result will be wrong. Then look for the method where the object or resource
is getting modified or accessed make that method or block of code as synchronized so that one thread can use at that time. The part of the program that you are making synchronized is critical section .

The condition which is making the soln/ans different is raised condition (solved by synchronized). 

Mutual Exclusion

Locks:

Locking is the method to lock the thread when the multiple threads are using the same resources so that one thread can access the resources later other will.

Intransic: These are inbuilt on java objects. used by adding synchronized key word. Here we dont have control on lock.
Here thread will wait for one to finish and executed later.

Explicit:  It is exlplicit by java.util.concurrent.lock. Where you can lock the specified thread you want. Here if the lock is not
available thread2 or other threads cant access the resources. Main thread will be completed without other threads.

E.g : Lock will ask wait for 1000 ms, but transaction is taking more than this, then thread2 will not wait for that, without thread2
the Main thread will get finished.

1. lock.lock() -> thread will wait until its get lock
2. lock.tryLock() -> try once and go
3. lock.unlock() -> unlock the lock

Reentrant lock -> Current thread can lock itself again more than once (Deadlock occurs - Means the current threads depends on something
to get unlock but the dependent depend on the the one which is waiting for it)

Fairness of lock -> Any thread can get a chance to execute first, there is like ordering -> achieved by passing true in reetrantlock.

Read write lock ->
//Multiple threads can acquire the read lock until any other not require the write lock		
// Multiple threads no need to wait for read locks, until any other thread acquire the write lock 
// because they will communicate each other

Deadlock:

This is the situation in multithreading where two or more threads are blocked forever, waiting for each other to release a resource.
This typically occurs when two or more threads have circular dependency on a set of locks.

Deadlocks typically occurs when 4 conditions are met simulteneously:

1. Mutual Exclusion: Only one thread can access a resource at a time.
2. Hold and wait: A thread holding atleast one resource is waiting to acquire resources held by other threads.
3. No preemption: Resources cannot be forcibly taken from threads holding them.
4. Circular wait: A set of threads of waiting for each other in a circular chain.


Thread communication:

In am multithreaded environment, threads often need to communicate and coordinate with each other to accomplish a task.
Without proper communication mechanisms, threads might end up in  inefficient busy-waiting states, leading to wastage of CPU resources
and potencial deadlocks.

wait, notify, notifyall

Example: producer will produce the data when there is no data and notify to the other thread, if there is already a data it will wait for other thread to consume the data. reverse case in consumer

notifyAll for more threads

Lamda Expressions:

// Functional interface which have single abstract method so, we can use lamda expressions to write simpler codes

Interface intefacename = (input) -> return statement;

// Same we can try for RUnnable interface also as it has only one abstract method

Thread pool:

Collection of pre-initialized threads.

Why we need to use?

1. Resource Management
2. Response Time
3. Control over thread count

Executors framework in Java:

The executor framework was introduced in Java 5 as part of the java.util.concurrent.package to simply the development of concurrent applications by abstracting away many of the complexities involved in creating and managing threads.

This will reduce following problems:

1. Manual Thread Management
2. Resource Management
3. Scalability
4. Thread reuse
5. Error handling

Executor framework has these three -> Executor, ExecutorService, ScheduledExecutorService

It will create the threads and all, you just need to add the business logic. And here you can use the threads from pool

And other statements also will not wait until you add executor.awaitTermination(1, Timeout.SECONDS) like you add .join for Thread

means it will wait for 1 second to complete executor Service, if it is not complete other statements will execute

//Callable and Runnable are kind of same, but in callable case it will return but in runnable no return

//executorService.submit(callable) as parameter will take the callable task as default, otherwise you have to specify runnable or callable

Callable has method called call() which will return something and having throws Exception

Runnable has method called run() which will not return anything and don't have throws Exception

ExecutorService Methods:

1. .submit(callable)
2. .submit(runnable)
3. .submit(runnable, result) -> here result upon successful completion as runnable will not return anything
4. .shutdown()
5.  .shutdownnow()
6. .awaitTermination()
7. isShutDown()
8. isTerminated()

Future:

1. .get()
2. .get(Time)
3. .isDone()
4. isCancelled()
5. .cancel(false or true)


